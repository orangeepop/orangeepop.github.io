{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Getting Started","text":"<p>This documentation will help you get started with JavaFx, a software platform used for developing and delivering graphical and interactive user interfaces for desktop, mobile, and embedded systems. Ultimately, this guide will provide optimal instructions for creating your first JavaFx project, how to avoid collisions while working with others, and a tutorial of a basic JavaFx model.</p> <p>For full documentation visit openjfx.io.</p>"},{"location":"#intended-users","title":"Intended Users","text":"<p>This guide is created for the following users:</p> <ul> <li>beginner programmers who want to learn how to setup and start a simple JavaFX project</li> </ul>"},{"location":"#prerequisite-knowledge","title":"Prerequisite Knowledge","text":"<p>You should have some levels of knowledge already on the following:</p> <ul> <li>basic knowledge of using command line commands</li> <li>basic knowledge of Java syntax</li> </ul>"},{"location":"#software-requirements","title":"Software Requirements","text":"<p>You should have the following installed:</p> <ul> <li>IntelliJ IDEA 2023.3.2</li> <li>Java 21</li> <li>Git 2.39.3 or higher</li> </ul>"},{"location":"#procedures-overview","title":"Procedures Overview","text":"<p>Main sections of this tutorial is outlined below:</p> <ul> <li>Creating a JavaFx project</li> <li>Creating a repository for JavaFx</li> <li>Create a Simple JavaFx Model</li> </ul>"},{"location":"Glossary/","title":"Glossary","text":"<ul> <li>repository</li> <li>Java SDK</li> <li>abstract method</li> <li>instance variable</li> <li>root node</li> <li>entry point?</li> </ul>"},{"location":"Task1/","title":"Creating a JavaFx Project","text":"<ol> <li> <p>Open IntelliJ IDEA and click on \"Create New Project\" or go to \"File\" &gt; \"New\" &gt; \"Project\".</p> </li> <li> <p>Select \"Java\" from the left sidebar and choose \"JavaFX Application\" from the list of project templates.</p> </li> <li> <p>Enter a name for your project and choose a location to save it. Click \"Next\".</p> </li> <li> <p>In the \"Project SDK\" dropdown, select the Java SDK you want to use for your project. If you don't have one installed, click on \"New\" and follow the prompts to install a Java SDK.</p> </li> <li> <p>Click \"Next\" and review the project settings. Make sure the \"Create module\" checkbox is selected and the module name is set to the same name as your project. Click \"Finish\".</p> </li> <li> <p>IntelliJ IDEA will create a new JavaFX project for you with a default package and a Main class.</p> </li> <li> <p>In the Main class, you will see the following code:</p> </li> </ol> <pre><code>public class Main extends Application {\n    public static void main(String[] args) {\n        launch(args);\n    }\n\n    @Override\n    public void start(Stage primaryStage) {\n        // Add your JavaFX code here\n    }\n}\n</code></pre>"},{"location":"Task2/","title":"Creating a repository for JavaFx","text":""},{"location":"Task3/","title":"Create a Simple JavaFX Project","text":""},{"location":"Task3/#overview","title":"Overview","text":"<p>In this section, you will set up the basic skeleton of a JavaFX project. For this tutorial, we will create a window that displays an image.</p>"},{"location":"Task3/#lets-get-started","title":"Let's get started","text":"<ol> <li>Import the Application class: <pre><code>import javafx.application.Application;\n</code></pre>    This will be the entry point to your JavaFX project.</li> <li>Create a class for your JavaFX project:  <pre><code>import javafx.application.Application;\n\npublic class ImageDisplay extends Application {\n    public void start(final Stage stage) {\n    }\n\n    public static void main(String[] args) {\n        launch();\n    }\n}\n</code></pre>     The start method is an abstract method implemented to be the entry point to your JavaFX project.</li> <li>Add instance variables to specify the size of the window to be generated. Let's make the height of the window to be 130 pixels, and the width to be 130 pixels:     <pre><code>import javafx.application.Application;\n\npublic class ImageDisplay extends Application {\n    private static final int WINDOW_X = 130;\n    private static final int WINDOW_Y = 130;\n\n    public void start(final Stage stage) {\n    }\n\n    public static void main(String[] args) {\n        launch();\n    }\n}\n</code></pre></li> <li>Import the Group class, and create a root node using this class:      <pre><code>import javafx.application.Application;\nimport javafx.scene.Group;\n\npublic class ImageDisplay extends Application {\n    private static final int WINDOW_X = 130;\n    private static final int WINDOW_Y = 130;\n\n    public void start(final Stage stage) {\n        Group root = new Group();\n    }\n\n    public static void main(String[] args) {\n        launch();\n    }\n}\n</code></pre>     Think of the window we will create as a painting; the root node creating using the Group class is a collection of the individual elements we wish to put on this painting.</li> <li>Import the Scene class, and create a new scene:     <pre><code>import javafx.application.Application;\nimport javafx.scene.Group;\nimport javafx.scene.Scene;\n\npublic class ImageDisplay extends Application {\n    private static final int WINDOW_X = 130;\n    private static final int WINDOW_Y = 130;\n\n    public void start(final Stage stage) {\n        Group root = new Group();\n        Scene scene = new Scene(root, WINDOW_X, WINDOW_Y);\n    }\n\n    public static void main(String[] args) {\n        launch();\n    }\n}\n</code></pre>     Think of the Scene class as the canvas for our painting. </li> <li>Now that we have a canvas, let's give a title to the canvas and put it on display:     <pre><code>import javafx.application.Application;\nimport javafx.scene.Group;\nimport javafx.scene.Scene;\n\npublic class ImageDisplay extends Application {\n    private static final int WINDOW_X = 130;\n    private static final int WINDOW_Y = 130;\n\n    public void start(final Stage stage) {\n        Group root = new Group();\n        Scene scene = new Scene(root, WINDOW_X, WINDOW_Y);\n        stage.setTitle(\"Meow!\");\n        stage.setScene(scene);\n        stage.show();\n    }\n\n    public static void main(String[] args) {\n        launch();\n    }\n}\n</code></pre></li> <li>Run the program through one of the following ways:<ul> <li>Clicking on the green triangle beside the main method     </li> <li>Clicking on the green triangle at the top right of the IntelliJ window</li> <li>Right click ImageDisplay.java and select Run 'ImageDisplay.main()' from the dropdown menu  </li> <li>Using the shortcut Ctrl+Shift+R on Mac, or Ctrl+R on Windows    You should see a window pop up after running the program: </li> </ul> </li> <li>Add the cat image to the resources folder:    </li> <li>Import ImageView class and create an ImageView with the cat image we just added:     <pre><code>import javafx.application.Application;\nimport javafx.scene.Group;\nimport javafx.scene.Scene;\nimport javafx.scene.image.ImageView;\n\npublic class ImageDisplay extends Application {\n    private static final int WINDOW_X = 130;\n    private static final int WINDOW_Y = 130;\n\n    public void start(final Stage stage) {\n        ImageView img = new ImageView(\"cat.png\");\n        Group root = new Group();\n        Scene scene = new Scene(root, WINDOW_X, WINDOW_Y);\n        stage.setTitle(\"Hello!\");\n        stage.setScene(scene);\n        stage.show();\n    }\n\n    public static void main(String[] args) {\n        launch();\n    }\n}\n</code></pre></li> <li>Add the image to the root, since it is an element we want to display on our canvas:     <pre><code>import javafx.application.Application;\nimport javafx.scene.Group;\nimport javafx.scene.Scene;\nimport javafx.scene.image.ImageView;\n\npublic class ImageDisplay extends Application {\n    private static final int WINDOW_X = 130;\n    private static final int WINDOW_Y = 130;\n\n    public void start(final Stage stage) {\n        ImageView img = new ImageView(\"cat.png\");\n        Group root = new Group(img);\n        Scene scene = new Scene(root, WINDOW_X, WINDOW_Y);\n        stage.setTitle(\"Hello!\");\n        stage.setScene(scene);\n        stage.show();\n    }\n\n    public static void main(String[] args) {\n        launch();\n    }\n}\n</code></pre></li> <li>Run the program.  </li> </ol> <p>Success</p> <p>You should see the cat image display in the JavaFX window we created! </p>"},{"location":"Task3/#conclusion","title":"Conclusion","text":"<p>By the end of this section, you will have learned how to do the following: </p> <ul> <li> How to create the entry point to your JavaFX project</li> <li> How to set up a window for your JavaFX project</li> <li> How to load and display an image in JavaFX</li> </ul> <p>These are the basics to starting a JavaFX project. Refer to the official JavaFX documentation or other online tutorials to create more complex projects. The Internet is your oyster!</p> <p><sub> 1. Class Application  2. Class Group  3. Class Scene  4. Class ImageView </sub></p>"},{"location":"Troubleshoot/","title":"Troubleshooting","text":"Problem Possible Cause Solution cat image does not load resources folder is not setup correctly 1. Resources folder is under the parent directory of the project 2. Mark folder as Resources folder by right clicking folder &gt; Mark Directory as &gt; Resources Root"}]}